@using StackExchange.Opserver.Data.SQL
@model SQLNode.AGInfo
@{
    var ag = Model;
    if (!ag.HasDatabases)
    {
        // don't render empty AGs
        return;
    }
}
@helper RenderDBIssues(SQLNode.AGReplica r) {
    if (r.SynchronizationHealth != SynchronizationHealths.Healthy)
    {
        var unhealthy = r.Databases.Where(db => db.SynchronizationHealth.HasValue && db.SynchronizationHealth != SynchronizationHealths.Healthy).ToList();
        if (r.Databases.Count > unhealthy.Count)
        {
            foreach (var db in unhealthy.OrderBy(u => u.DatabaseName))
            {
                <div class="text-warning" title="@db.DatabaseName
Sync: @(db.SynchronizationState.HasValue ? db.SynchronizationState.Value.GetDescription() : "Unknown")
Health: @(db.SynchronizationHealth.HasValue ? db.SynchronizationHealth.Value.GetDescription() : "Unknown")
@if (db.SuspendReason.HasValue) {<text>
Suspension Reason: @db.SuspendReason.Value.GetDescription()</text>}">@db.IconSpan() @db.MonitorStatus.Span(db.DatabaseName)</div>
            }
        }
        else
        {
            <div class="text-danger">Sync: @(r.SynchronizationHealth.HasValue ? r.SynchronizationHealth.Value.GetDescription() : "Unknwon")</div>
        }
    }
}

<div class="col-md-3">
    <div class="panel panel-default">
        <div class="panel-heading">
            <span class="cluster-name">@ag.IconSpan() @ag.ClusterName:</span> <a href="#/cluster/@ag.ClusterName.UrlEncode()/@ag.Name.UrlEncode()">@ag.Name</a>
        </div>
        <div class="panel-body small list-group">
            <div class="well well-sm well-condensed">
                <div class="pull-right">
                    <span class="glyphicon glyphicon-tasks @(ag.LocalReplica.Databases.GetWorstStatus().TextClass(showGood: true))"></span> @SQLHelpers.HealthDescriptionAGs(ag.LocalReplica.Databases, minimal: true)
                </div>
                <div>
                    @ag.LocalReplica.IconSpan() <a href="#/cluster/@ag.ClusterName.UrlEncode()/@ag.Name.UrlEncode()/@ag.Node.Name.UrlEncode()">@ag.Node.Name</a> <span class="text-success">(Master)</span>
                </div>

                @RenderDBIssues(ag.LocalReplica)
                <div>
                    <span class="glyphicon glyphicon-upload"></span> @(((long)ag.RemoteReplicas.Sum(r => r.BytesSentPerSecond)).ToSize(zero: "0"))ps
                    <span class="glyphicon glyphicon-download"></span> @(((long)ag.RemoteReplicas.Sum(r => r.BytesReceivedPerSecond)).ToSize(zero: "0"))ps
                </div>
                <div>
                    <span class="pull-right">@ag.Node.LastFetch.ToPollSpan(mini: true, lastSuccess: true)</span>
                    <span class="text-muted">Log Size:</span> @ag.LocalReplica.Databases.Sum(db => db.LogKBytesUsed).ToComma() <span class="text-muted">KB</span>
                </div>
                @if (ag.GroupSynchronizationHealth != SynchronizationHealths.Healthy && ag.LocalReplica != null)
                {
                    var volumeIds = ag.Node.Databases.SafeData(true).Where(db => ag.LocalReplica.Databases.Select(rdb => rdb.DatabaseId).Contains(db.Id)).Select(db => db.LogVolumeId);
                    var volumes = ag.Node.Volumes.SafeData(true).Where(v => volumeIds.Contains(v.VolumeId));
                    foreach (var v in volumes)
                    {
                        <div class="ag-log-volume">
                            <span class="label">Space Free:</span> @v.VolumeMountPoint
                            <span class="volume-space">@((v.AvailableBytes / 1024).ToComma()) <span class="text-muted">KB</span></span>
                        </div>
                    }
                }
            </div>
            @foreach (var r in ag.RemoteReplicas)
            {
                <div class="col-md-11 col-md-offset-1 well-condensed">
                    <div class="well well-sm well-condensed @(r.SynchronizationHealth == SynchronizationHealths.Healthy ? "" : " ag-problem")" title="Group: @r.AvailabilityGroupName
    Node: @r.ReplicaServerName
    ReplicaId: @r.ReplicaId.ToString()
    Sync Health: @r.SynchronizationHealth
    Connection State: @r.ConnectedState
    Mode: @r.AvailabilityMode">
                        <div class="pull-right">
                            <span class="glyphicon glyphicon-tasks @(r.Databases.GetWorstStatus().TextClass())"></span> @SQLHelpers.HealthDescriptionAGs(r.Databases, minimal: true)
                        </div>
                        <div>
                            <span>
                                @r.IconSpan() <a href="#/cluster/@ag.ClusterName.UrlEncode()/@ag.Name.UrlEncode()/@r.ReplicaServerName.UrlEncode()">@r.ReplicaServerName</a>
                                @switch (r.AvailabilityMode)
                                {
                                    case AvailabilityModes.AsyncrhonousCommit: <span class="text-muted">(async)</span>
                                        break;
                                    case AvailabilityModes.SynchronousCommit: <span class="text-primary">(sync)</span>
                                        break;
                                    default: <span class="text-warning">(unknown)</span>
                                        break;
                                }
                            </span>
                        </div>
                        @RenderDBIssues(r)
                        <div>
                            <span class="glyphicon glyphicon-upload"></span> @(((long)r.BytesReceivedPerSecond).ToSize(zero: "0 B"))ps
                            <span class="glyphicon glyphicon-download"></span> @(((long)r.BytesSentPerSecond).ToSize(zero: "0 B"))ps
                        </div>
                        <div>
                            <span class="pull-right">@ag.Node.AvailabilityGroups.ToPollSpan(mini: true, lastSuccess: true)</span>
                            <span class="text-muted">Queue:</span> @r.Databases.Sum(db => db.LogSendQueueSize).ToComma() <span class="text-muted">KB</span> 
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>