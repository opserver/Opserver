@using StackExchange.Opserver.Controllers
@using StackExchange.Opserver.Data.Dashboard
@using StackExchange.Opserver.Views.SQL
@model DashboardModel
@{
    var i = Model.CurrentInstance;
    if (i == null) { return; }
    var connections = i.Connections;
    var enableDashboardLinks = Current.Settings.Dashboard.Enabled;
    var monitoredList = new HashSet<string>(DashboardData.AllNodes.Select(si => si.Name.ToLower()));
}
<h5 class="page-header">
    @(connections.Data?.Count.Pluralize("Active connection") ?? "Unknown connections") on @i.Name:
    @Helpers.PollNow(i)
</h5>
@if (!connections.LastPollSuccessful)
{
    <div class="alert alert-danger">
        <h5>There was an error fetching server status from @i.Name:</h5>
        <p class="error-stack">@connections.ErrorMessage</p>
    </div>
} else {
    <table class="table table-striped table-hover text-nowrap table-super-condensed table-responsive">
        <thead>
            <tr>
                <th>Login</th>
                <th>Host</th>
                <th>Connected</th>
                <th>Login</th>
                <th>Reads</th>
                <th>Writes</th>
                <th>Status</th>
                <th>Isolation</th>
                <th>Query</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in connections.Data)
            {
                <tr class="plan-row" data-plan-handle="@HttpServerUtility.UrlTokenEncode(c.PlanHandle)">
                    <td>@c.LoginName</td>
                    <td title="Program: @c.ProgramName (@c.HostProcessId)">
                        @if (enableDashboardLinks && monitoredList.Contains(c.HostName.IsNullOrEmptyReturn("").ToLower()))
                        {
                            <a href="@Url.Action(nameof(DashboardController.Node), "Dashboard", new { node = c.HostName })">@c.HostName</a>
                        }
                        else
                        {
                            @c.HostName
                        }
                    </td>
                  <td data-val="@c.ConnectTime.ToEpochTime()">@c.ConnectTime.ToRelativeTimeSpan()</td>
                    <td data-val="@c.LoginTime.ToEpochTime()">@c.LoginTime.ToRelativeTimeSpan()</td>
                    <td>@c.NumReads.ToComma()</td>
                    <td>@c.NumWrites.ToComma()</td>
                    <td>@c.SessionStatus</td>
                    <td>@c.TransactionIsolationLevel.GetDescription()</td>
                    <td class="query-col">@c.QueryText.TruncateWithEllipsis(80)</td>
                </tr>
            }
            @if (!connections.Data.Any())
            {
                <tr>
                    <td colspan="11"><div class="no-content">There are no active operations at the moment.</div></td>
                </tr>
            }
        </tbody>
    </table>
    <script>
        $(function() {
            //$('#connections-table').tablesorter({
            //    headers: {
            //        1: { sorter: 'cellText' },
            //        2: { sorter: 'dataVal', sortInitialOrder: 'desc' },
            //        3: { sorter: 'dataVal', sortInitialOrder: 'desc' },
            //        4: { sorter: 'commas', sortInitialOrder: 'desc' },
            //        5: { sorter: 'commas', sortInitialOrder: 'desc' },
            //    }
            //});
        });
    </script>
}