@using StackExchange.Opserver.Data.SQL
@using StackExchange.Opserver.Views.SQL
@model DatabasesModel
@{
    Layout = "Databases.Modal.cshtml";
    var s = Model.Instance;
    var tables = s.GetTableInfo(Model.Database);
    var columns = s.GetColumnInfo(Model.Database);
}
@if (tables.Data == null || !tables.LastPollSuccessful)
{
    <div class="alert alert-warning">
        <h5>There was an error fetching table info from @s.Name for @Model.Database</h5>
        <p class="error-stack">@tables.ErrorMessage</p>
    </div>
} else {
    <table class="table table-striped table-hover text-nowrap table-super-condensed table-responsive js-database-tables">
        <thead>
            <tr>
                <th>Table</th>
                <th>Rows</th>
                <th>Indexes</th>
                <th>Data Size</th>
                <th>Index Size</th>
                <th>Total Size</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in tables.Data.OrderBy(t => t.SchemaName).ThenBy(t => t.TableName))
            {
                <tr data-table="@(t.SchemaName).@(t.TableName)" class="js-database-table" title="@(t.SchemaName).@(t.TableName) created @t.CreationDate">
                    <td>
                        <a href="#/db/@(Model.Database)/tables/@(t.SchemaName).@(t.TableName)">
                            <span class="text-muted">@(t.SchemaName).</span><span>@t.TableName</span>
                            @if (t.TableType == TableTypes.Heap)
                            {
                                <span class="text-muted"> (Heap)</span>
                            }
                        </a>
                    </td>
                    <td data-val="@t.RowCount.ToString()">@t.RowCount.ToComma()</td>
                    <td data-val="@t.IndexCount.ToString()">@t.IndexCount.ToComma()</td>
                    <td data-val="@t.DataTotalSpaceKB.ToString()">@((t.DataTotalSpaceKB*1024).ToSize().ToMutedIfNA())</td>
                    <td data-val="@t.IndexTotalSpaceKB.ToString()">@((t.IndexTotalSpaceKB*1024).ToSize().ToMutedIfNA())</td>
                    <td data-val="@t.TotalSpaceKB.ToString()">@((t.TotalSpaceKB*1024).ToSize().ToMutedIfNA())</td>
                </tr>
                <tr class="tablesorter-childRow hidden">
                    <td colspan="6">
                        @Html.Partial("Databases.Modal.Columns", columns.Data.Where(c => c.Schema == t.SchemaName && c.TableName == t.TableName))
                    </td>
                </tr>
                <tr class="tablesorter-childRow hidden"></tr>
            }
        </tbody>
        <tfoot>
            @if (tables.Data.Any())
            {
                <tr class="total-row">
                    <td><b>Total</b> <span class="text-muted">(@tables.Data.Count.Pluralize("table"))</span></td>
                    <td>@(tables.Data.Sum(t => t.RowCount).ToComma())</td>
                    <td>@(tables.Data.Sum(t => t.IndexCount).ToComma())</td>
                    <td>@((tables.Data.Sum(t => t.DataTotalSpaceKB) * 1024).ToSize().ToMutedIfNA())</td>
                    <td>@((tables.Data.Sum(t => t.IndexTotalSpaceKB) * 1024).ToSize().ToMutedIfNA())</td>
                    <td>@((tables.Data.Sum(t => t.TotalSpaceKB) * 1024).ToSize().ToMutedIfNA())</td>
                </tr>
            }
            else
            {
                <tr>
                    <td colspan="6">
                        <div class="no-content">There aren't any tables in this database.</div>
                    </td>
                </tr>
            }
        </tfoot>
    </table>
    <script>
        $(function () {
            $('.js-database-tables').tablesorter({
                headers: {
                    1: { sorter: 'dataVal', sortInitialOrder: 'desc' },
                    2: { sorter: 'dataVal', sortInitialOrder: 'desc' },
                    3: { sorter: 'dataVal', sortInitialOrder: 'desc' },
                    4: { sorter: 'dataVal', sortInitialOrder: 'desc' },
                    5: { sorter: 'dataVal', sortInitialOrder: 'desc' },
                    6: { sorter: 'dataVal', sortInitialOrder: 'desc' }
                }
            });
        });
    </script>
}