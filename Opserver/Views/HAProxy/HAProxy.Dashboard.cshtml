@using StackExchange.Opserver.Controllers
@using StackExchange.Opserver.Data.HAProxy
@using Action = StackExchange.Opserver.Data.HAProxy.Action
@model StackExchange.Opserver.Views.HAProxy.HAProxyModel
@{
    Layout = "HAProxy.cshtml";

    var isAdmin = Current.User.IsHAProxyAdmin;
    // TODO: Fold in
    var groupQS = Model.SelectedGroup != null ? "&group=" + Model.SelectedGroup.Name.UrlEncode() : "";
    var proxies = Model.Proxies;
    // move critical stuff to the top
    // TODO: Decide on admin sort
    // TODO: Not allocate the ever living hell out of this
    var groups = proxies.GroupBy(p => new
    {
        p.Name,
        p.GroupLinkName,
        GroupName = p.Instance.Group.Name,
        ProxyName = p.Name,
        p.NiceName,
        p.Instance.HasAdminLogin
    }).Select(g => new
    {
        g.Key.Name,
        g.Key.GroupLinkName,
        g.Key.GroupName,
        g.Key.ProxyName,
        g.Key.NiceName,
        g.Key.HasAdminLogin,
        GroupStatus = g.GetWorstStatus(),
        AllServers = g.SelectMany(p => p.Servers),
        AllStats = g.SelectMany(p => p.AllStats),
        PollDate = g.Max(p => p.PollDate)
    }).OrderByDescending(g => g.GroupLinkName == Model.WatchProxy)
        .ThenBy(g => g.GroupStatus == MonitorStatus.Good)
        .ThenBy(g => g.AllServers.GetWorstStatus() == MonitorStatus.Warning)
        .ToList();

    foreach (var p in proxies)
    {
        foreach (var s in p.AllStats)
        {
            statMapping.Add(s, p);
        }
    }
    var erroring = Model.Groups
        .SelectMany(g => g.Instances)
        .Where(i => i.Proxies.ErrorMessage.HasValue())
        .ToList();
}
@functions
{
    readonly Dictionary<Item, Proxy> statMapping = new Dictionary<Item, Proxy>();
    public string CombinedStat(string title, IEnumerable<Item> stats, Func<Item, string> getter)
    {
        var sb = StringBuilderCache.Get()
                .Append(title)
                .Append(':')
                .AppendLine();
        foreach (var s in stats)
        {
            sb.Append(statMapping[s].Instance.Name)
              .Append(": ")
              .Append(getter(s))
              .Append('\n');
        }
        sb.Length -= 1;
        return sb.ToStringRecycle();
    }

    public string GetRowClass(StatusType type)
    {
        switch (type)
        {
            case StatusType.Frontend:
            case StatusType.Backend:
                return "active";
        }
        return null;
    }

}
<div class="row js-refresh" data-name="haproxy">
    <div class="col-md-@(isAdmin ? "9" : "12")">
        @if (Model.SelectedGroup != null && erroring.Any())
        {
            <div class="alert alert-warning">
                <h5>There was an error querying HAProxy for status.</h5>
                @foreach (var i in erroring)
                {
                    <div>
                        <strong>@i.Group.Name: @i.Name</strong> (<a href="@i.Url">@i.Url</a>)
                        <p>@i.Proxies.ErrorMessage</p>
                    </div>
                }
            </div>
        }
        @if (groups.Any())
        {
            <table class="table table-striped table-responsive table-super-condensed table-actions actions-first table-hover">
                @foreach (var g in groups)
                {
                    var showAdmin = isAdmin && g.HasAdminLogin;
                    var combinedStats = g.AllStats.GroupBy(p => new { p.Description, p.Type, p.IsFrontend, p.IsChecked, p.IsServer }).ToList();
                    var anyUp = g.AllServers.Any(s => !s.InMaintenance);
                    var anyDown = g.AllServers.Any(s => s.InMaintenance);

                    <tbody class="@(g.GroupLinkName == Model.WatchProxy ? "watched-proxy" : "")" data-group="@g.GroupName" data-proxy="@g.ProxyName">
                        <tr class="category-row" title="Name: @g.GroupName">
                            <th colspan="12">
                                <h5>
                                    @if (showAdmin)
                                    {
                                        <a href="#" data-action="@Action.ready"
                                           class="js-haproxy-action glyphicon glyphicon-plus-sign text-success hover-pulsate@(anyDown ? null : " disabled")" 
                                           title="put all servers server into rotation for this backend"></a>
                                        <a href="#" data-action="@Action.drain"
                                           class="js-haproxy-action glyphicon glyphicon-minus-sign text-danger hover-pulsate@(anyUp ? null : " disabled")"
                                           title="take all servers out of rotation for this backend"></a>
                                    <a href="#" data-action="@Action.maint"
                                           class="js-haproxy-action glyphicon glyphicon-circle-arrow-down text-danger hover-pulsate@(anyUp ? null : " disabled")" 
                                           title="take all servers down for this backend"></a>
                                    }
                                    <a href="@Url.Action(nameof(HAProxyController.Dashboard), new { watch = g.GroupLinkName })@groupQS">@g.GroupStatus.IconSpan() @g.GroupName: @g.NiceName</a>
                                    <span class="pull-right text-muted small">As of: @g.PollDate.ToRelativeTimeSpanMini()</span>
                                </h5>
                            </th>
                        </tr>
                        <tr>
                            <th></th>
                            <th>Server</th>
                            <th>Instances</th>
                            <th>Sessions</th>
                            <th colspan="2">Rate</th>
                            <th colspan="2">Bandwidth</th>
                            <th colspan="2">Status</th>
                        </tr>
                        @foreach (var s in combinedStats.OrderBy(sg => sg.Key.Type == StatusType.Frontend || sg.Key.Type == StatusType.Backend).ThenBy(sg => sg.Key.Description))
                        {
                            var stat = s.Key;
                            var proxyStatus = s.GetWorstStatus();
                            var latestStat = s.OrderBy(si => si.LastStatusChange).Last();
                            var sAnyUp = s.Any(sp => !sp.InMaintenance);
                            var sAnyDown = s.Any(sp => sp.InMaintenance);
                            // If everything is green, render it as a backup server if appropriate
                            var isBackup = s.Any(sp => sp.IsServer && sp.Backup > 0);
                            var rowClass = proxyStatus == MonitorStatus.Good
                                ? isBackup ? "info" : ""
                                : proxyStatus.RowClass();

                            <tr class="@(GetRowClass(stat.Type)) status @rowClass" data-server="@stat.Description">
                                <td>
                                    @if (stat.IsServer && showAdmin)
                                    {
                                        <a href="#" data-action="@Action.ready"
                                           class="js-haproxy-action glyphicon glyphicon-plus-sign text-success hover-pulsate@(sAnyDown ? null : " disabled")" 
                                           title="put this server into rotation for this backend"></a>
                                        <a href="#" data-action="@Action.drain"
                                           class="js-haproxy-action glyphicon glyphicon-minus-sign text-danger hover-pulsate@(sAnyUp ? null : " disabled")" 
                                           title="take this server out of rotation for this backend"></a>                                        
                                           <a href="#" data-action="@Action.maint"
                                           class="js-haproxy-action glyphicon glyphicon-circle-arrow-down text-danger hover-pulsate@(sAnyUp ? null : " disabled")" 
                                           title="take this server down for this backend"></a>
                                    }
                                </td>
                                <td>@proxyStatus.IconSpan() @stat.Description@if (isBackup){ <span class="text-primary"> (Backup)</span>}</td>
                                <td class="load-balancers">
                                    @foreach (var ip in s)
                                    {
                                        var p = statMapping[ip];
                                        // TODO: Primary/active detection
                                        var isPrimary = false;
                                        <span title="@ip.CheckStatusString" class="@(isPrimary ? "primary" : null)@(ip.IsServer && ip.Backup > 0 ? " text-muted" : null)">@ip.IconSpan() @p.Instance.Name</span>
                                    }
                                </td>
                                <td title="@CombinedStat("Current sessions", s, si => si.CurrentSessions.ToComma()) ">
                                    <span class="text-muted">Cur:</span>
                                    @s.Sum(si => si.CurrentSessions).ToComma()
                                </td>
                                <td title="@CombinedStat("New Sessions per second (current)", s, si => si.CurrentNewSessionsPerSecond.ToComma()) ">
                                    <span class="text-muted">Cur:</span>
                                    @s.Sum(si => si.CurrentNewSessionsPerSecond).ToComma()
                                </td>
                                <td title="@CombinedStat("Max Sessions per second", s, si => si.MaxNewSessionPerSecond.ToComma()) ">
                                    <span class="text-muted">Max:</span>
                                    @s.Sum(si => si.MaxNewSessionPerSecond).ToComma()
                                </td>
                                <td title="@CombinedStat("Bytes transferred in", s, si => $"{si.BytesIn.ToComma()} bytes ({si.BytesIn.ToHumanReadableSize()})") ">
                                    <span class="text-muted">In:</span>
                                    @s.Sum(si => si.BytesIn).ToHumanReadableSize()
                                </td>
                                <td title="@CombinedStat("Bytes transferred out", s, si => $"{si.BytesOut.ToComma()} bytes ({si.BytesOut.ToHumanReadableSize()})") ">
                                    <span class="text-muted">Out:</span>
                                    @s.Sum(si => si.BytesOut).ToHumanReadableSize()
                                </td>
                                <td title="@CombinedStat("Status", s, si => (!si.IsFrontend && si.IsChecked ? si.LastStatusChange.ToRelativeTimeMiniAll() : "") + " (" + si.Status + ")") ">
                                    @(!stat.IsFrontend && stat.IsChecked ? s.Max(si => si.LastStatusChange).ToRelativeTimeMiniAll() : "") @latestStat.ToStatusSpan()
                                </td>
                                <td title="@CombinedStat("Poll Status", s, si => $"{si.CheckStatusString} - {si.CheckCode.ToString()} ({si.CheckDurationMiliseconds.ToString()}ms)") ">
                                    @latestStat.CheckStatusString@(latestStat.CheckCode > 0 && latestStat.CheckCode != 200 ? " (" + latestStat.CheckCode.ToString() + ")" : "")
                                </td>
                            </tr>
                        }
                    </tbody>
                }
            </table>
        }
        else if (!erroring.Any())
        {
            <div class="no-content">No Proxies are Available</div>
        }
    </div>
    @if (isAdmin)
    {
        <div class="col-md-3">
            @if (!proxies.Any())
            {
                <div class="alert alert-warning small">
                    No matching HAProxy instances with admin login info
                </div>
            }
            @if (proxies.Any(p => p.Servers.Any()))
            {
                var adminGroups = proxies.GroupBy(p => p.Instance.Group.Name).Select(g => new
                {
                    Name = g.Key,
                    Servers = g.SelectMany(p => p.Servers)
                });
                var servers = proxies.SelectMany(p => p.Servers).GroupBy(s => s.ServerName).Select(g => new
                {
                    Server = g.Key,
                    Up = g.Count(s => s.MonitorStatus == MonitorStatus.Good),
                    Maint = g.Count(s => s.InMaintenance),
                    Down = g.Count(s => s.MonitorStatus != MonitorStatus.Good && !s.InMaintenance),
                    MonitorStatus = g.GetWorstStatus()
                }).OrderBy(s => s.Server).ToList();

                <div class="haproxy-admin-servers">
                    <table class="table table-striped table-responsive table-super-condensed table-actions table-hover">
                        <tbody>
                            <tr class="category-row">
                                <th colspan="5">
                                    <h5>Instances</h5>
                                </th>
                            </tr>
                            <tr>
                                <th></th>
                                <th>Instance</th>
                                <th>Up</th>
                                <th>Maint</th>
                                <th>Down</th>
                            </tr>
                        </tbody>
                        <tbody>
                            @foreach (var g in adminGroups)
                            {
                                var up = g.Servers.Count(s => s.MonitorStatus == MonitorStatus.Good);
                                var maint = g.Servers.Count(s => s.InMaintenance);
                                var down = g.Servers.Count(s => s.MonitorStatus != MonitorStatus.Good && !s.InMaintenance);
                                var status = g.Servers.GetWorstStatus();

                                <tr class="status @status.RowClass()">
                                    <td>
                                        <a href="#" data-group="@g.Name" data-action="@Action.ready"
                                           class="js-haproxy-action glyphicon glyphicon-plus-sign text-success hover-pulsate@(maint > 0 ? null : " disabled")" 
                                           title="put all proxies in this group into rotation"></a>
                                        <a href="#" data-group="@g.Name" data-action="@Action.drain"
                                           class="js-haproxy-action glyphicon glyphicon-minus-sign text-danger hover-pulsate@(up + down > 0 ? null : " disabled")"
                                           title="take all proxies in this group out of rotation"></a>
                                        <a href="#" data-group="@g.Name" data-action="@Action.maint "
                                           class="js-haproxy-action glyphicon glyphicon-circle-arrow-down text-danger hover-pulsate@(up + down > 0 ? null : " disabled")" 
                                           title="take all proxies in this group down"></a>
                                    </td>
                                    <td>@status.IconSpan() @g.Name</td>
                                    <td>@up.ToComma()</td>
                                    <td>@maint.ToComma()</td>
                                    <td>@down.ToComma()</td>
                                </tr>
                            }
                        </tbody>
                        <tbody>
                            <tr class="category-row">
                                <th colspan="5">
                                    <h5>Servers</h5>
                                </th>
                            </tr>
                            <tr>
                                <th></th>
                                <th>Server</th>
                                <th>Up</th>
                                <th>Maint</th>
                                <th>Down</th>
                            </tr>
                        </tbody>
                        <tbody>
                            @foreach (var s in servers)
                            {
                                var status = s.Down > 0 && s.Up == 0 ? MonitorStatus.Critical : s.Down > 0 && s.Up > 0 ? MonitorStatus.Warning : MonitorStatus.Good;
                                <tr class="status @s.MonitorStatus.RowClass()">
                                    <td>
                                        <a href="#" data-server="@s.Server" data-action="@Action.ready"
                                           class="js-haproxy-action glyphicon glyphicon-plus-sign text-success hover-pulsate@(s.Maint > 0 ? null : " disabled")" 
                                           title="put this server into rotation everywhere"></a>
                                        <a href="#" data-server="@s.Server" data-action="@Action.drain"
                                           class="js-haproxy-action glyphicon glyphicon-minus-sign text-danger hover-pulsate@(s.Up + s.Down > 0 ? null : " disabled")"
                                           title="take this server out of rotation everywhere"></a>
                                        <a href="#" data-server="@s.Server" data-action="@Action.maint"
                                           class="js-haproxy-action glyphicon glyphicon-circle-arrow-down text-danger hover-pulsate@(s.Up + s.Down > 0 ? null : " disabled")" 
                                           title="take this server down everywhere"></a>
                                    </td>
                                    <td>@status.IconSpan() @s.Server</td>
                                    <td>@s.Up.ToComma()</td>
                                    <td>@s.Maint.ToComma()</td>
                                    <td>@s.Down.ToComma()</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    }
</div>