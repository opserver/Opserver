/* Configuration for the Exceptions dashboard */
{
  //"recentSeconds": 600,// (Optional) How many seconds an error is considered recent (for the next 2 settings below) - defaults to 600
  "warningRecentCount": 100, // (Optional) How many recent errors before the header turns to a warning color
  "criticalRecentCount": 200, // (Optional) How many recent errors before the header turns to a critical color
  // "warningCount": null, // (Optional) How many errors (regardless of recency) before the header turns to a warning color
  // "criticalCount": null, // (Optional) How many errors (regardless of recency) before the header turns to a critical color
  // "enablePreviews": true, // (Optional) Whether to enable hover previews for exceptions - defaults to true
  //"perAppCacheCount": 5000, // (Optional) How many errors to cache and display per exceptional application name - defaults to 5000
  "viewGroups": "ExceptionReaders", // Groups allowed to view, but take no actions on errors
  "adminGroups": "ExceptionAdmins", // Groups allowed to view and take actions on errors

  /* (Optional) A list of ungrouped applications to display - for simple or few-application scenarios */
  //"applications": [
  //  "Core",
  //  "Chat",
  //  "StackExchange.com"
  //],
  /* Or, you can use a grouped approach. This creates grouped dropdowns for larger scenarios
     For instance you may want to group by application type, or the team that handles it
     An application can appear under multiple groups, just list it on both.
  */
  "groups": [
    {
      // Group name in the UI
      "name": "Core Q&A",
      // Exceptional applications to include in this group
      "applications": [
        "Core",
        "Chat",
        "Stack Auth",
        "StackExchange.com",
        "API v2",
        "Sockets",
        "Area 51",
        "Open ID",
        "Stack Server",
        "StackSnippets",
        "Status"
      ]
    },
    {
      "name": "Careers",
      "applications": [
        "Careers",
        "BackOffice",
        "BackOffice",
        "Control Panel",
        "StackShop",
        "CareersAuth"
      ]
    }
  ],
  /* The database connection to the exception store */
  "stores": [
    {
      // Name of the exception store (mainly for debugging)
      "name": "New York",
      // (Optional) The query timeout before giving up on this store (when shit hits the fan...maybe a store isn't available) - defualt is 30 timeout
      "queryTimeoutMs": 2000,
      // (Optional) How often to poll this store for new/changed exceptions - defaults to 300
      "pollIntervalSeconds": 30,
      // SQL Server connection string to the Exceptional store
      "connectionString": "Server=ny-sql03.ds.stackexchange.com;Database=NY.Exceptions;Integrated Security=SSPI;"
    }
  ],
  /* Replacements for Stack Trace descriptions. It's general purpose with specific uses in mind.
     Example:
       If using SourceLink, instead of a file path we'll get a URL for the pieces in the stack.
       This replaces those URLs from the raw content wo the usable file browser (at the correct commit).
       Essentially: you get a one-click path to see the source for that line of code. Awesome, eh?
  */
  "stackTraceReplacements": [
    {
      "name": "github",
      "pattern": "(?<= in )https?://raw.githubusercontent.com/([^/]+/)([^/]+/)([^/]+/)(.*?):line (\\d+)",
      "replacement": "<a href=\"https://github.com/$1$2blob/$3$4#L$5\">$4:line $5</a>"
    }
  ]
}