<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StackExchange.Exceptional</name>
    </assembly>
    <members>
        <member name="T:StackExchange.Exceptional.Email.ErrorEmailer">
            <summary>
            Error emailing handler
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Email.ErrorEmailer.ToAddress">
            <summary>
            Address to send messages to
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Email.ErrorEmailer.Enabled">
            <summary>
            Whether email functionality is enabled
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Email.ErrorEmailer.Setup(StackExchange.Exceptional.IEmailSettings)">
            <summary>
            Configure the emailer - note that if config isn't valid this sill silently fail
            </summary>
            <param name="eSettings">Settings to use to configure error emailing</param>
        </member>
        <member name="M:StackExchange.Exceptional.Email.ErrorEmailer.SendMail(StackExchange.Exceptional.Error)">
            <summary>
            If enabled, sends an error email to the configured recipients
            </summary>
            <param name="error">The error the email is about</param>
        </member>
        <member name="T:StackExchange.Exceptional.Error">
            <summary>
            Represents a logical application error (as opposed to the actual exception it may be representing).
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.FormLogFilters">
            <summary>
            Filters on form values *not * to log, because they contain sensitive data
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.CookieLogFilters">
            <summary>
            Filters on form values *not * to log, because they contain sensitive data
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.DataIncludeRegex">
            <summary>
            Gets the data include pattern, like "SQL.*|Redis-*" to match against .Data keys to include when logging
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Id">
            <summary>
            The Id on this error, strictly for primary keying on persistent stores
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.GUID">
            <summary>
            Unique identifier for this error, gernated on the server it came from
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Exceptional.Error"/> class.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Exceptional.Error"/> class from a given <see cref="P:StackExchange.Exceptional.Error.Exception"/> instance.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.#ctor(System.Exception,System.Web.HttpContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Exceptional.Error"/> class
            from a given <see cref="P:StackExchange.Exceptional.Error.Exception"/> instance and 
            <see cref="T:System.Web.HttpContext"/> instance representing the HTTP 
            context during the exception.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.SetContextProperties(System.Web.HttpContext)">
            <summary>
            Sets Error properties pulled from HttpContext, if present
            </summary>
            <param name="context">The HttpContext related to the request</param>
        </member>
        <member name="M:StackExchange.Exceptional.Error.IsBuiltInException(System.Exception)">
            <summary>
            returns if the type of the exception is built into .Net core
            </summary>
            <param name="e">The exception to check</param>
            <returns>True if the exception is a type from within the CLR, false if it's a user/third party type</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Error.GetHash">
            <summary>
            Gets a unique-enough hash of this error.  Stored as a quick comparison mechanism to rollup duplicate errors.
            </summary>
            <returns>"Unique" hash for this error</returns>
        </member>
        <member name="P:StackExchange.Exceptional.Error.IsProtected">
            <summary>
            Reflects if the error is protected from deletion
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Exception">
            <summary>
            Gets the <see cref="P:StackExchange.Exceptional.Error.Exception"/> instance used to create this error
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.ApplicationName">
            <summary>
            Gets the name of the application that threw this exception
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.MachineName">
            <summary>
            Gets the hostname of where the exception occured
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Type">
            <summary>
            Get the type of error
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Source">
            <summary>
            Gets the source of this error
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Message">
            <summary>
            Gets the exception message
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Detail">
            <summary>
            Gets the detail/stack trace of this error
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.ErrorHash">
            <summary>
            The hash that describes this error
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.CreationDate">
            <summary>
            Gets the time in UTC that the error occured
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.StatusCode">
            <summary>
            Gets the HTTP Status code associated with the request
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.ServerVariables">
            <summary>
            Gets the server variables collection for the request
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.QueryString">
            <summary>
            Gets the query string collection for the request
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Form">
            <summary>
            Gets the form collection for the request
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Cookies">
            <summary>
            Gets a collection representing the client cookies of the request
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.RequestHeaders">
            <summary>
            Gets a collection representing the headers sent with the request
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.CustomData">
            <summary>
            Gets a collection of custom data added at log time
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.DuplicateCount">
            <summary>
            The number of newer Errors that have been discarded because they match this Error and fall within the configured 
            "IgnoreSimilarExceptionsThreshold" TimeSpan value.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.IsDuplicate">
            <summary>
            This flag is to indicate that there were matches of this error when added to the queue or store.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.SQL">
            <summary>
            Gets the SQL command text assocaited with this error
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.DeletionDate">
            <summary>
            Date this error was deleted (for stores that support deletion and retention, e.g. SQL)
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Host">
            <summary>
            The URL host of the request causing this error
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.Url">
            <summary>
            The URL path of the request causing this error
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.HTTPMethod">
            <summary>
            The HTTP Method causing this error, e.g. GET or POST
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.IPAddress">
            <summary>
            The IPAddress of the request causing this error
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.FullJson">
            <summary>
            Json populated from database stored, deserialized after if needed
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.RollupPerServer">
            <summary>
            Whether to roll up errors per-server. E.g. should an identical error happening on 2 separate servers be a DuplicateCount++, or 2 separate errors.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.ToString">
            <summary>
            Returns the value of the <see cref="P:StackExchange.Exceptional.Error.Message"/> property.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.Clone">
            <summary>
            Create a copy of the error and collections so if it's modified in memory logging is not affected
            </summary>
            <returns>A clone of this error</returns>
        </member>
        <member name="P:StackExchange.Exceptional.Error.ServerVariablesSerializable">
            <summary>
            Variables strictly for JSON serialziation, to maintain non-dictonary behavior
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.QueryStringSerializable">
            <summary>
            Variables strictly for JSON serialziation, to maintain non-dictonary behavior
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.FormSerializable">
            <summary>
            Variables strictly for JSON serialziation, to maintain non-dictonary behavior
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.CookiesSerializable">
            <summary>
            Variables strictly for JSON serialziation, to maintain non-dictonary behavior
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.RequestHeadersSerializable">
            <summary>
            Variables strictly for JSON serialziation, to maintain non-dictonary behavior
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.ServerVariablesSerialzable">
            <summary>
            Only for deserializing errors pre-spelling fix properly
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.QueryStringSerialzable">
            <summary>
            Only for deserializing errors pre-spelling fix properly
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.FormSerialzable">
            <summary>
            Only for deserializing errors pre-spelling fix properly
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.CookiesSerialzable">
            <summary>
            Only for deserializing errors pre-spelling fix properly
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.RequestHeadersSerialzable">
            <summary>
            Only for deserializing errors pre-spelling fix properly
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.ToJson">
            <summary>
            Gets a JSON representation for this error
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Error.ToDetailedJson">
            <summary>
            Gets a JSON representation for this error suitable for cross-domain 
            </summary>
            <returns></returns>
        </member>
        <member name="M:StackExchange.Exceptional.Error.FromJson(System.String)">
            <summary>
            Deserializes provided JSON into an Error object
            </summary>
            <param name="json">JSON representing an Error</param>
            <returns>The Error object</returns>
        </member>
        <member name="T:StackExchange.Exceptional.Error.NameValuePair">
            <summary>
            Serialization class in place of the NameValueCollection pairs
            </summary>
            <remarks>This exists because things like a querystring can havle multiple values, they are not a dictionary</remarks>
        </member>
        <member name="P:StackExchange.Exceptional.Error.NameValuePair.Name">
            <summary>
            The name for this variable
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Error.NameValuePair.Value">
            <summary>
            The value for this variable
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.ErrorStore">
            <summary>
            Represents an error log capable of storing and retrieving errors generated in an ASP.NET Web application.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.ErrorStore.DefaultBackupQueueSize">
            <summary>
            The default number of exceptions (rollups count as 1) to buffer in memory in the event of an error store outage
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.ErrorStore.DefaultRollupSeconds">
            <summary>
            The default number of seconds to roll up errors for.  Identical stack trace errors within 10 minutes get a DuplicateCount++ instead of a separate exception logged.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.#ctor(StackExchange.Exceptional.ErrorStoreSettings)">
            <summary>
            Base constructor of the error store to set common properties
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an error store with the specified rollup
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.BackupQueueSize">
            <summary>
            The size of the backup/retry queue for logging, defaults to 1000
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.InFailureMode">
            <summary>
            Gets if this error store is 
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.ErrorStore.RollupThreshold">
            <summary>
            The Rollup threshold within which errors logged rapidly are rolled up
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.ErrorStore.LastWriteFailure">
            <summary>
            The last time this error store failed to write an error
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.LogError(StackExchange.Exceptional.Error)">
            <summary>
            Logs an error in log for the application
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.GetError(System.Guid)">
            <summary>
            Retrieves a single error based on Id
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.ProtectError(System.Guid)">
            <summary>
            Prevents error identfied by 'id' from being deleted when the error log is full, if the store supports it
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.ProtectErrors(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Protects a list of errors in the log
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.DeleteError(System.Guid)">
            <summary>
            Deletes a specific error from the log
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.DeleteErrors(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes a list of errors from the log, only if they are not protected
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.HardDeleteError(System.Guid)">
            <summary>
            Deletes a specific error from the log, any traces of it
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.DeleteAllErrors(System.String)">
            <summary>
            Deletes all non-protected errors from the log
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.GetAllErrors(System.Collections.Generic.List{StackExchange.Exceptional.Error},System.String)">
            <summary>
            Retrieves all of the errors in the log
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.GetErrorCount(System.Nullable{System.DateTime},System.String)">
            <summary>
            Retrieves a count of application errors since the specified date, or all time if null
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.Name">
            <summary>
            Get the name of this error log store implementation.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.ApplicationName">
            <summary>
            Gets the name of the application to which the log is scoped.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.MachineName">
            <summary>
            Gets the name of the machine logging these errors.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.IgnoreRegexes">
            <summary>
            Gets the list of exceptions to ignore specified in the configuration file
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.IgnoreExceptions">
            <summary>
            Gets the list of exceptions to ignore specified in the configuration file
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.Default">
            <summary>
            Gets the default error store specified in the configuration, 
            or the in-memory store if none is configured.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.Setup(System.String,StackExchange.Exceptional.ErrorStore)">
            <summary>
            Sets the default error store to use for logging
            </summary>
            <param name="applicationName">The application name to use when logging errors</param>
            <param name="store">The error store used to store, e.g. <code>new SQLErrorStore(myConnectionString)</code></param>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.WriteQueue">
            <summary>
            Gets the write queue for errors, which is populated in the case of a write failure
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.LastRetryException">
            <summary>
            Gets the last exception that happened when trying to log exceptions
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.Log(StackExchange.Exceptional.Error)">
            <summary>
            Logs an error in log for the application
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.Protect(System.Guid)">
            <summary>
            Deletes all non-protected errors from the log
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.ProtectList(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Protects a list of errors in the log
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.Delete(System.Guid)">
            <summary>
            Deletes an error from the log with the specified id
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.DeleteList(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes a list of non-protected errors from the log
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.DeleteAll(System.String)">
            <summary>
            Deletes all non-protected errors from the log
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.Get(System.Guid)">
            <summary>
            Gets a specific exception with the specified guid
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.GetAll(System.Collections.Generic.List{StackExchange.Exceptional.Error},System.String)">
            <summary>
            Gets all in the store, including those in the backup queue if it's in use
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.GetCount(System.Nullable{System.DateTime},System.String)">
            <summary>
            Gets the count of exceptions, optionally those since a certain date
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.QueueError(StackExchange.Exceptional.Error)">
            <summary>
            Queues an error into the backup/retry queue
            </summary>
            <remarks>These will be written to the store when we're able to connect again</remarks>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.Test">
            <summary>
            Tests to see if this error store is working
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.LogExceptionWithoutContext(System.Exception,System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            For logging an exception with no HttpContext, most commonly used in non-web applications 
            so that they don't have to carry a reference to System.Web
            </summary>
            <param name="ex">The exception to log</param>
            <param name="appendFullStackTrace">Whether to append a full stack trace to the exception's detail</param>
            <param name="rollupPerServer">Whether to log up per-server, e.g. errors are only duplicates if they have same stack on the same machine</param>
            <param name="customData">Any custom data to store with the exception like UserId, etc...this will be rendered as JSON in the error view for script use</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.LogException(System.Exception,System.Web.HttpContext,System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Logs an exception to the configured error store, or the in-memory default store if none is configured
            </summary>
            <param name="ex">The exception to log</param>
            <param name="context">The HTTPContext to record variables from.  If this isn't a web request, pass <see langword="null" /> in here</param>
            <param name="appendFullStackTrace">Whether to append a full stack trace to the exception's detail</param>
            <param name="rollupPerServer">Whether to log up per-server, e.g. errors are only duplicates if they have same stack on the same machine</param>
            <param name="customData">Any custom data to store with the exception like UserId, etc...this will be rendered as JSON in the error view for script use</param>
            <param name="applicationName">If specified, the application name to log with, if not specified the name in the config is used</param>
            <returns>The Error created, if one was created and logged, null if nothing was logged</returns>
            <remarks>
            When dealing with a non web requests, pass <see langword="null" /> in for context.  
            It shouldn't be forgotten for most web application usages, so it's not an optional parameter.
            </remarks>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.IsDescendentOf(System.Type,System.String)">
            <summary>
            Returns true if t is of className, or descendent from className
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.GetConnectionStringByName(System.String)">
            <summary>
            Gets the connection string from the connectionStrings configuration element, from web.config or app.config, throws if not found.
            </summary>
            <param name="connectionStringName">The connection string name to fetch</param>
            <returns>The connection string requested</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Connection string was not found</exception>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.AddJSInclude(System.String)">
            <summary>
            Adds a JavaScript include to all error log pages, for customizing the behavior and such
            </summary>
            <param name="path">The path of the JS file, app-relative ~/ are allowed</param>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.AddCSSInclude(System.String)">
            <summary>
            Adds a CSS include to all error log pages, for customizing the look and feel
            </summary>
            <param name="path">The path of the CSS file, app-relative ~/ are allowed</param>
        </member>
        <member name="F:StackExchange.Exceptional.ErrorStore.jQueryURL">
            <summary>
            The URL to use for jQuery on the pages rendered by Exceptional
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.EnableLogging">
            <summary>
            Re-enables error logging afer a .DisableLogging() call
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorStore.DisableLogging">
            <summary>
            Disables error logging, call .EnableLogging() to re-enable
            </summary>
            <remarks>
            This is useful when an app domain is being torn down, for example <code>IRegisteredObject.Stop()</code> when a web application is being stopped
            </remarks>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.IsLoggingEnabled">
            <summary>
            Returns whether an error passed in right now would be logged
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.GetCustomData">
            <summary>
            Method to get custom data for an error for, will be call when custom data isn't already present
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStore.GetIPAddress">
            <summary>
            Method of getting the IP address for the error, defaults to retrieving it from server variables
            but may need to be replaced in special nulti-proxy situations.
            </summary>
        </member>
        <member name="E:StackExchange.Exceptional.ErrorStore.OnBeforeLog">
            <summary>
            Event handler to run before an exception is logged to the store
            </summary>
        </member>
        <member name="E:StackExchange.Exceptional.ErrorStore.OnAfterLog">
            <summary>
            Event handler to run after an exception has been logged to the store
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.ErrorBeforeLogEventArgs">
            <summary>
            Arguments for the event handler called before an exception is logged
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorBeforeLogEventArgs.Abort">
            <summary>
            Whether to abort the logging of this exception, if set to true the exception will not be logged.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorBeforeLogEventArgs.Error">
            <summary>
            The Error object in question
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorBeforeLogEventArgs.#ctor(StackExchange.Exceptional.Error)">
            <summary>
            Creates an ErrorBeforeLogEventArgs object to be passed to event handlers, setting .Abort = true prevents the error from being logged.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.ErrorAfterLogEventArgs">
            <summary>
            Arguments for the event handler called after an exception is logged
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorAfterLogEventArgs.ErrorGuid">
            <summary>
            The Error object in question
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorAfterLogEventArgs.#ctor(StackExchange.Exceptional.Error)">
            <summary>
            Creates an ErrorAfterLogEventArgs object to be passed to event handlers
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ErrorAfterLogEventArgs.GetError">
            <summary>
            Gets the current state of the Error that was logged.
            Important note: since this may be a duplicate of an earlier error it's an explicit fetch from the error store
            </summary>
            <returns>The current state of the Error matching this guid</returns>
        </member>
        <member name="T:StackExchange.Exceptional.ExceptionalModule">
            <summary>
            HTTP module that catches and log exceptions from ASP.Net Applications
            </summary>   
        </member>
        <member name="M:StackExchange.Exceptional.ExceptionalModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes the module and prepares it to handle requests.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ExceptionalModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ExceptionalModule.ErrorStore">
            <summary>
            Gets the <see cref="P:StackExchange.Exceptional.ExceptionalModule.ErrorStore"/> instance to which the module will log exceptions.
            </summary>        
        </member>
        <member name="M:StackExchange.Exceptional.ExceptionalModule.OnError(System.Object,System.EventArgs)">
            <summary>
            The handler called when an unhandled exception bubbles up to the module.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.ExceptionalModule.LogException(System.Exception,System.Web.HttpContext,System.Boolean)">
            <summary>
            Logs an exception and its context to the error log.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Extensions.ExtensionMethods">
            <summary>
            Extenstion methods used inside of StackExchange.Exceptional
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.ToRelativeTime(System.DateTime)">
            <summary>
            Returns a humanized string indicating how long ago something happened, eg "3 days ago".
            For future dates, returns when this DateTime will occur from DateTime.UtcNow.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.Truncate(System.String,System.Int32)">
            <summary>
            force string to be maxlen or smaller
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.TruncateWithEllipsis(System.String,System.Int32)">
            <summary>
            If this String is over 'maxLength', answers a new String with Length = 'maxLength', with ...
            as the final three characters.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.IsNullOrEmpty(System.String)">
            <summary>
            Answers true if this String is either null or empty.
            </summary>
            <remarks>I'm so tired of typing String.IsNullOrEmpty(s)</remarks>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.IsNullOrEmptyReturn(System.String,System.String[])">
            <summary>
            Returns the first non-null/non-empty parameter when this String is null/empty.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.HasValue(System.String)">
            <summary>
            Answers true if this String is neither null or empty.
            </summary>
            <remarks>I'm also tired of typing !String.IsNullOrEmpty(s)</remarks>
        </member>
        <member name="F:StackExchange.Exceptional.Extensions.ExtensionMethods.UnknownIP">
            <summary>
            When a client IP can't be determined
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.IsPrivateIP(System.String)">
            <summary>
            returns true if this is a private network IP  
            http://en.wikipedia.org/wiki/Private_network
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.GetRemoteIP(System.Collections.Specialized.NameValueCollection)">
            <summary>
            retrieves the IP address of the current request -- handles proxies and private networks
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.ToGuid(System.String)">
            <summary>
            Converts a string to a guid, or empty guid if empty or invalid
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.ToFileName(System.Guid)">
            <summary>
            Strips non-essential characters from a guid
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.ToShortException(System.String)">
            <summary>
            Gets the short exception name, e.g. System.IndexOutOfRange returns just IndexOutOfRange
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.ResolvePath(System.String)">
            <summary>
            Resolves ~\ relative paths if needed
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.ResolveRelativeUrl(System.String)">
            <summary>
            Resolves ~/ relative paths if needed
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.ToEpochTime(System.DateTime)">
            <summary>
            Returns a unix Epoch time given a Date
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.ToEpochTime(System.Nullable{System.DateTime})">
            <summary>
            Returns a unix Epoch time if given a value, and null otherwise.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.ToJsonDictionary(System.Collections.Generic.List{StackExchange.Exceptional.Error.NameValuePair})">
            <summary>
            Takes a NameValuePair collection and reduces it down to a JSON object in kay/value pair form
            </summary>
            <remarks>
            This is not technically correct for all cases, since a querystring can contain multiple 
            occurences of the same variable for example, this reduces it down to 1 occurence for the acessibility tradeoff
            </remarks>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.ToNameValueCollection(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Turns a dictionary into a name value collection, for code reuse
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Extensions.ExtensionMethods.ToJson(System.Object)">
            <summary>
            Returns a JSON string representing this object
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.HandlerFactory">
            <summary>
            HTTP handler that chooses the correct handler/view based on the request.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.HandlerFactory.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
            <summary>
            Gets the HttpHandler for executing the request, used to proxy requests through here (e.g. MVC) or by the HttpModule directly
            </summary>
            <param name="context">The HTTPContext for the request</param>
            <param name="requestType">The type of request, GET/POST</param>
            <param name="url">The URL of the request</param>
            <param name="pathTranslated">The translated path of the request</param>
            <returns>The HTTPHandler that can execute the request</returns>
        </member>
        <member name="M:StackExchange.Exceptional.HandlerFactory.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            Enables the factory to reuse an existing handler instance.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Settings">
            <summary>
            The Settings element for Exceptional's configuration
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Settings.Current">
            <summary>
            Current instance of the settings element
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Settings.ApplicationName">
            <summary>
            Application name to log with
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Settings.DataIncludePattern">
            <summary>
            The Regex pattern of data keys to include. For example, "Redis.*" would include all keys that start with Redis
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Settings.SettingsCollection`1">
            <summary>
            A collection of list types all with a Name attribute
            </summary>
            <typeparam name="T">The type of collection, inherited from SettingsCollectionElement</typeparam>
        </member>
        <member name="P:StackExchange.Exceptional.Settings.SettingsCollection`1.Item(System.String)">
            <summary>
            Accessor by key
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Settings.SettingsCollection`1.Item(System.Int32)">
            <summary>
            Accessor by index
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Settings.SettingsCollection`1.CreateNewElement">
            <summary>
            Default constructor for this element
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Settings.SettingsCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Default by-key fetch for this element
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Settings.SettingsCollection`1.All">
            <summary>
            Returns all the elements in this collection, type-cased out
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Settings.SettingsCollectionElement">
            <summary>
            An element in a settings collection that has a Name property, a generic base for SettingsCollection collections
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Settings.SettingsCollectionElement.ToString">
            <summary>
            String representation for this entry, the Name
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Settings.SettingsCollectionElement.Name">
            <summary>
            A unique name for this entry
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Settings.Email">
            <summary>
            The ErrorStore section of the configuration, optional and will default to a MemoryErrorStore if not specified
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Settings.ErrorStore">
            <summary>
            The ErrorStore section of the configuration, optional and will default to a MemoryErrorStore if not specified
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Settings.Ignore">
            <summary>
            The Ignore section of the configuration, optional and no errors will be blocked from logging if not specified
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Settings.IgnoreSettings">
            <summary>
            Ignore element for deserilization from a configuration, e.g. web.config or app.config
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Settings.IgnoreSettings.Regexes">
            <summary>
            Regular expressions collection for errors to ignore.  Any errors with a .ToString() matching any regex here will not be logged
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Settings.IgnoreSettings.Types">
            <summary>
            Types collection for errors to ignore.  Any errors with a Type matching any name here will not be logged
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Settings.LogFilters">
            <summary>
            The Ignore section of the configuration, optional and no errors will be blocked from logging if not specified
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Settings.LogFilterSettings">
            <summary>
            Ignore element for deserilization from a configuration, e.g. web.config or app.config
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Settings.LogFilterSettings.FormFilters">
            <summary>
            Form submitted values to replace on save - this prevents logging passwords, etc.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.Settings.LogFilterSettings.CookieFilters">
            <summary>
            Cookie values to replace on save - this prevents logging auth tokens, etc.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.IEmailSettings">
            <summary>
            Interface for email settings, either direct or from a config
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.IEmailSettings.ToAddress">
            <summary>
                The address to send email messages to
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.IEmailSettings.FromAddress">
            <summary>
                The address to send email messages from
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.IEmailSettings.FromDisplayName">
            <summary>
                The display name to send email messages from
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.IEmailSettings.SMTPHost">
            <summary>
                The SMTP server to send mail through
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.IEmailSettings.SMTPPort">
            <summary>
                The port to send mail on (if SMTP server is specified via smtpHost="serverName")
            </summary>
            
        </member>
        <member name="P:StackExchange.Exceptional.IEmailSettings.SMTPUserName">
            <summary>
                The SMTP username to use, if authentication is needed
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.IEmailSettings.SMTPPassword">
            <summary>
                The SMTP password to use, if authentication is needed
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.IEmailSettings.SMTPEnableSSL">
            <summary>
                Whether to use SSL when sending via SMTP
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.IEmailSettings.PreventDuplicates">
            <summary>
                Flags whether or not emails are sent for duplicate errors.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.EmailSettings">
            <summary>
            Email settings configuration, for configuring Email sending from code
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.ToAddress">
            <summary>
                The address to send email messages to
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.FromAddress">
            <summary>
                The address to send email messages from
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.FromDisplayName">
            <summary>
                The display name to send email messages from
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.SMTPHost">
            <summary>
                The SMTP server to send mail through
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.SMTPPort">
            <summary>
                The port to send mail on (if SMTP server is specified via smtpHost="serverName")
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.SMTPUserName">
            <summary>
                The SMTP username to use, if authentication is needed
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.SMTPPassword">
            <summary>
                The SMTP password to use, if authentication is needed
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.SMTPEnableSSL">
            <summary>
                Whether to use SSL when sending via SMTP
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettings.PreventDuplicates">
            <summary>
                Flags whether or not emails are sent for duplicate errors.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.EmailSettings.#ctor">
            <summary>
            Creates an email settings object defaulting the SMTP port to 25
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.EmailSettingsConfig">
            <summary>
            A settings object describing email properties
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettingsConfig.ToAddress">
            <summary>
                The address to send email messages to
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettingsConfig.FromAddress">
            <summary>
                The address to send email messages from
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettingsConfig.FromDisplayName">
            <summary>
                The display name to send email messages from
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettingsConfig.SMTPHost">
            <summary>
                The SMTP server to send mail through
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettingsConfig.SMTPPort">
            <summary>
                The port to send mail on (if SMTP server is specified via smtpHost="serverName")
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettingsConfig.SMTPUserName">
            <summary>
                The SMTP username to use, if authentication is needed
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettingsConfig.SMTPPassword">
            <summary>
                The SMTP password to use, if authentication is needed
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettingsConfig.SMTPEnableSSL">
            <summary>
                Whether to use SSL when sending via SMTP
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.EmailSettingsConfig.PreventDuplicates">
            <summary>
                Flags whether or not emails are sent for duplicate errors.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.ErrorStoreSettings">
            <summary>
            A settings object describing an error store
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.Type">
            <summary>
            The type of error store to use, File, SQL, Memory, etc.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.Path">
            <summary>
            The path to use on file based error stores
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.ConnectionString">
            <summary>
            The connection string to use on database based error stores.  If provided, ConnectionStringName is ignored.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.ConnectionStringName">
            <summary>
            The name of the connection string to use from the application's configuration.
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.Size">
            <summary>
            The size of this error log, either how many to keep or how many to display depending on type
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.RollupSeconds">
            <summary>
            The duration in seconds of error groups to rollup, similar errors within this timespan will be shown as duplicates
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.ErrorStoreSettings.BackupQueueSize">
            <summary>
            The size of the backup queue to use for the log, after rollups, it's how many entries in memory can be stored before culling the oldest
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.IgnoreRegex">
            <summary>
            A regex entry, to match against error messages to see if we should ignore them
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.IgnoreRegex.Name">
            <summary>
            The name that describes this regex
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.IgnoreRegex.Pattern">
            <summary>
            The Pattern to match on the exception message
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.IgnoreRegex.PatternRegex">
            <summary>
            Regex object representing the pattern specified, compiled once for use against all future exceptions
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.IgnoreType">
            <summary>
            A type entry, to match against error messages types to see if we should ignore them
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.IgnoreType.Name">
            <summary>
            The name that describes this ignored type
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.IgnoreType.Type">
            <summary>
            The fully qualified type of the exception to ignore
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.LogFilter">
            <summary>
            A filter entry with the forn variable name and what to replace the value with when logging
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.LogFilter.Name">
            <summary>
            The form parameter name to ignore
            </summary>
        </member>
        <member name="P:StackExchange.Exceptional.LogFilter.ReplaceWith">
            <summary>
            The value to log instead of the real value
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Stores.JSONErrorStore">
            <summary>
            An <see cref="T:StackExchange.Exceptional.ErrorStore"/> implementation that uses JSON files as its backing store. 
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Stores.JSONErrorStore.MaximumSize">
            <summary>
            The maximum count of errors stored before the first is overwritten.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Stores.JSONErrorStore.DefaultSize">
            <summary>
            The default maximum count of errors stored before the first is overwritten.
            </summary>        
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.#ctor(StackExchange.Exceptional.ErrorStoreSettings)">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.Stores.JSONErrorStore"/> with the given configuration.
            </summary>        
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.Stores.JSONErrorStore"/> with the specified path string.
            </summary>
            <param name="path">The folder path to use to store errors</param>
            <param name="size">How many errors to limit the log to, the size+1th error (oldest) will be removed if exceeded</param>
            <param name="rollupSeconds">The rollup seconds, defaults to <see cref="F:StackExchange.Exceptional.ErrorStore.DefaultRollupSeconds"/>, duplicate errors within this time period will be rolled up</param>
        </member>
        <member name="P:StackExchange.Exceptional.Stores.JSONErrorStore.Name">
            <summary>
            Name for this error store
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.ProtectError(System.Guid)">
            <summary>
            Protects an error from deletion, by making it ReadOnly
            </summary>
            <param name="guid">The guid of the error to protect</param>
            <returns>True if the error was found and proected, false otherwise</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.DeleteError(System.Guid)">
            <summary>
            Deletes an error, by deleting it from the logging folder
            </summary>
            <param name="guid">The guid of the error to delete</param>
            <returns>True if the error was found and deleted, false otherwise</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.DeleteAllErrors(System.String)">
            <summary>
            Deleted all errors in the log, by clearing all *.json files in the folder
            </summary>
            <returns>True if any errors were deleted, false otherwise</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.LogError(StackExchange.Exceptional.Error)">
            <summary>
            Logs the JSON representation of an Error to the file store specified by the page for this store
            If the rollup conditions are met, then the matching error will have a DuplicateCount += @DuplicateCount (usually 1, unless in retry) rather than a distinct new row for the error
            </summary>
            <param name="error">The error to log</param>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.GetError(System.Guid)">
            <summary>
            Gets the error with the specified guid from the log/folder
            </summary>
            <param name="guid">The guid of the error to retrieve</param>
            <returns>The error object if found, null otherwise</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.GetAllErrors(System.Collections.Generic.List{StackExchange.Exceptional.Error},System.String)">
            <summary>
            Retrieves all of the errors in the log folder
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.GetErrorCount(System.Nullable{System.DateTime},System.String)">
            <summary>
            Retrieves a count of application errors since the specified date, or all time if null
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.JSONErrorStore.TryFindOriginalError(System.String,StackExchange.Exceptional.Error@)">
            <summary>
            Answers the older exception that 'possibleDuplicate' matches, returning null if no match is found.
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Stores.MemoryErrorStore">
            <summary>
            An <see cref="T:StackExchange.Exceptional.ErrorStore"/> implementation that uses memory as its backing store. 
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Stores.MemoryErrorStore.MaximumSize">
            <summary>
            The maximum count of errors stored before the first is overwritten.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Stores.MemoryErrorStore.DefaultSize">
            <summary>
            The default maximum count of errors stored before the first is overwritten.
            </summary>        
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.#ctor">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.Stores.MemoryErrorStore"/> with defaults.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.#ctor(StackExchange.Exceptional.ErrorStoreSettings)">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.Stores.MemoryErrorStore"/> with the given size.
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.Stores.MemoryErrorStore"/> with the given size.
            </summary>
            <param name="size">How many errors to limit the log to, the size+1th error (oldest) will be removed if exceeded</param>
            <param name="rollupSeconds">The rollup seconds, defaults to <see cref="F:StackExchange.Exceptional.ErrorStore.DefaultRollupSeconds"/>, duplicate errors within this time period will be rolled up</param>
        </member>
        <member name="P:StackExchange.Exceptional.Stores.MemoryErrorStore.Name">
            <summary>
            Name for this error store
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.ProtectError(System.Guid)">
            <summary>
            Protects an error from deletion, by setting IsProtected = true
            </summary>
            <param name="guid">The guid of the error to protect</param>
            <returns>True if the error was found and protected, false otherwise</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.DeleteError(System.Guid)">
            <summary>
            Deletes an error, by deleting it from the in-memory log
            </summary>
            <param name="guid">The guid of the error to delete</param>
            <returns>True if the error was found and deleted, false otherwise</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.DeleteAllErrors(System.String)">
            <summary>
            Deleted all errors in the log, by clearing the in-memory log
            </summary>
            <returns>True in all cases</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.LogError(StackExchange.Exceptional.Error)">
            <summary>
            Logs the error to the in-memory error log
            If the rollup conditions are met, then the matching error will have a DuplicateCount += @DuplicateCount (usually 1, unless in retry) rather than a distinct new row for the error
            </summary>
            <param name="error">The error to log</param>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.GetError(System.Guid)">
            <summary>
            Gets the error with the specified guid from the in-memory log
            </summary>
            <param name="guid">The guid of the error to retrieve</param>
            <returns>The error object if found, null otherwise</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.GetAllErrors(System.Collections.Generic.List{StackExchange.Exceptional.Error},System.String)">
            <summary>
            Retrieves all of the errors in the log
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.MemoryErrorStore.GetErrorCount(System.Nullable{System.DateTime},System.String)">
            <summary>
            Retrieves a count of application errors since the specified date, or all time if null
            </summary>
        </member>
        <member name="T:StackExchange.Exceptional.Stores.SQLErrorStore">
            <summary>
            An <see cref="T:StackExchange.Exceptional.ErrorStore"/> implementation that uses SQL Server as its backing store. 
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Stores.SQLErrorStore.MaximumDisplayCount">
            <summary>
            The maximum count of errors to show.
            </summary>
        </member>
        <member name="F:StackExchange.Exceptional.Stores.SQLErrorStore.DefaultDisplayCount">
            <summary>
            The default maximum count of errors shown at once.
            </summary>        
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.#ctor(StackExchange.Exceptional.ErrorStoreSettings)">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.Stores.SQLErrorStore"/> with the given configuration.
            </summary>        
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:StackExchange.Exceptional.Stores.SQLErrorStore"/> with the specified connection string.
            </summary>
            <param name="connectionString">The database connection string to use</param>
            <param name="displayCount">How many errors to display in the log (for display ONLY, the log is not truncated to this value)</param>
            <param name="rollupSeconds">The rollup seconds, defaults to <see cref="F:StackExchange.Exceptional.ErrorStore.DefaultRollupSeconds"/>, duplicate errors within this time period will be rolled up</param>
        </member>
        <member name="P:StackExchange.Exceptional.Stores.SQLErrorStore.Name">
            <summary>
            Name for this error store
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.ProtectError(System.Guid)">
            <summary>
            Protects an error from deletion, by making IsProtected = 1 in the database
            </summary>
            <param name="guid">The guid of the error to protect</param>
            <returns>True if the error was found and protected, false otherwise</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.ProtectErrors(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Protects errors from deletion, by making IsProtected = 1 in the database
            </summary>
            <param name="guids">The guids of the error to protect</param>
            <returns>True if the errors were found and protected, false otherwise</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.DeleteError(System.Guid)">
            <summary>
            Deletes an error, by setting DeletionDate = GETUTCDATE() in SQL
            </summary>
            <param name="guid">The guid of the error to delete</param>
            <returns>True if the error was found and deleted, false otherwise</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.DeleteErrors(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes errors, by setting DeletionDate = GETUTCDATE() in SQL
            </summary>
            <param name="guids">The guids of the error to delete</param>
            <returns>True if the errors were found and deleted, false otherwise</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.HardDeleteError(System.Guid)">
            <summary>
            Hard deletes an error, actually deletes the row from SQL rather than setting DeletionDate
            This is used to cleanup when testing the error store when attempting to come out of retry/failover mode after losing connection to SQL
            </summary>
            <param name="guid">The guid of the error to hard delete</param>
            <returns>True if the error was found and deleted, false otherwise</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.DeleteAllErrors(System.String)">
            <summary>
            Deleted all errors in the log, by setting DeletionDate = GETUTCDATE() in SQL
            </summary>
            <returns>True if any errors were deleted, false otherwise</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.LogError(StackExchange.Exceptional.Error)">
            <summary>
            Logs the error to SQL
            If the rollup conditions are met, then the matching error will have a DuplicateCount += @DuplicateCount (usually 1, unless in retry) rather than a distinct new row for the error
            </summary>
            <param name="error">The error to log</param>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.GetError(System.Guid)">
            <summary>
            Gets the error with the specified guid from SQL
            This can return a deleted error as well, there's no filter based on DeletionDate
            </summary>
            <param name="guid">The guid of the error to retrieve</param>
            <returns>The error object if found, null otherwise</returns>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.GetAllErrors(System.Collections.Generic.List{StackExchange.Exceptional.Error},System.String)">
            <summary>
            Retrieves all non-deleted application errors in the database
            </summary>
        </member>
        <member name="M:StackExchange.Exceptional.Stores.SQLErrorStore.GetErrorCount(System.Nullable{System.DateTime},System.String)">
            <summary>
            Retrieves a count of application errors since the specified date, or all time if null
            </summary>
        </member>
    </members>
</doc>
